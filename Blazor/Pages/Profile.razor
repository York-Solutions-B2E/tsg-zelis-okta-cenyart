@page "/profile"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Nav

<style>
    .token-box {
        max-width: 100%;
        overflow-x: auto;
        white-space: pre-wrap;
        word-break: break-word;
        background-color: #222;
        color: #ddd;
        padding: 10px;
        border-radius: 5px;
        font-family: monospace;
    }
    .claim-table td {
        word-break: break-word;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Profile</h3>
    <button class="btn btn-primary" @onclick="GrantRoleChangeAccess" disabled="@HasRoleChangePermission">
        Grant Access to Assign Role
    </button>
</div>

<AuthorizeView>
    <Authorized Context="context">

        <h5>All Claims</h5>
        <table class="table table-dark table-striped claim-table">
            <thead><tr><th style="width:30%;">Key</th><th style="width:70%;">Value</th></tr></thead>
            <tbody>
                @foreach (var claim in context.User.Claims)
                {
                    <tr><td>@claim.Type</td><td>@claim.Value</td></tr>
                }
            </tbody>
        </table>

        @* ID Token *@
        @if (!string.IsNullOrEmpty(idToken))
        {
            <h5>ID Token (raw)</h5>
            <div class="token-box">@idToken</div>

            <h5>ID Token Claims</h5>
            <table class="table table-dark table-striped claim-table">
                <thead><tr><th style="width:30%;">Key</th><th style="width:70%;">Value</th></tr></thead>
                <tbody>
                    @foreach (var claim in idClaims)
                    {
                        <tr><td>@claim.Type</td><td>@claim.Value</td></tr>
                    }
                </tbody>
            </table>
        }

        @* Access Token (may be opaque) *@
        @if (!string.IsNullOrEmpty(accessToken))
        {
            <h5>Access Token (raw)</h5>
            <div class="token-box">@accessToken</div>

            <h5>Access Token Claims</h5>
            <table class="table table-dark table-striped claim-table">
                <thead><tr><th style="width:30%;">Key</th><th style="width:70%;">Value</th></tr></thead>
                <tbody>
                    @foreach (var claim in accessClaims)
                    {
                        <tr><td>@claim.Type</td><td>@claim.Value</td></tr>
                    }
                </tbody>
            </table>
        }

        @* API Access Token (JWT) *@
        @if (!string.IsNullOrEmpty(apiAccessToken))
        {
            <h5>ApiAccessToken (raw)</h5>
            <div class="token-box">@apiAccessToken</div>

            <h5>ApiAccessToken Claims</h5>
            <table class="table table-dark table-striped claim-table">
                <thead><tr><th style="width:30%;">Key</th><th style="width:70%;">Value</th></tr></thead>
                <tbody>
                    @foreach (var claim in apiAccessClaims)
                    {
                        <tr><td>@claim.Type</td><td>@claim.Value</td></tr>
                    }
                </tbody>
            </table>
        }

    </Authorized>

    <NotAuthorized>
        <div class="alert alert-warning">You are not signed in!</div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? idToken;
    private string? accessToken;
    private string? apiAccessToken;
    private List<Claim> idClaims = new();
    private List<Claim> accessClaims = new();
    private List<Claim> apiAccessClaims = new();
    private bool HasRoleChangePermission => HttpContextAccessor.HttpContext?.User?.HasClaim("permissions", "Audit.RoleChanges") ?? false;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext is null) return;

        var authResult = await httpContext.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        if (authResult?.Properties is null) return;

        idToken = authResult.Properties.GetTokenValue("id_token");
        accessToken = authResult.Properties.GetTokenValue("access_token");

        var handler = new JwtSecurityTokenHandler();

        // ID token
        if (!string.IsNullOrEmpty(idToken))
        {
            var jwt = handler.ReadJwtToken(idToken);
            idClaims = jwt.Claims.ToList();
        }

        // Access token (may be opaque)
        if (!string.IsNullOrEmpty(accessToken))
        {
            if (accessToken.Count(c => c == '.') == 2)
            {
                var jwt = handler.ReadJwtToken(accessToken);
                accessClaims = jwt.Claims.ToList();
            }
            else
            {
                accessClaims = new List<Claim>
                {
                    new Claim("token_format", "opaque or non-JWT"),
                    new Claim("value", accessToken)
                };
            }
        }

        // API access token
        var apiClaim = httpContext.User.FindFirst("api_access_token")?.Value;
        if (!string.IsNullOrEmpty(apiClaim))
        {
            apiAccessToken = apiClaim;

            try
            {
                var jwt = handler.ReadJwtToken(apiAccessToken);
                apiAccessClaims = jwt.Claims.ToList();
            }
            catch
            {
                // fallback if somehow not well-formed
                apiAccessClaims = new List<Claim>
                {
                    new Claim("raw_value", apiAccessToken)
                };
            }
        }
    }

    private void GrantRoleChangeAccess()
    {
        var relative = Nav.ToBaseRelativePath(Nav.Uri) ?? "";
        var returnPath = string.IsNullOrEmpty(relative) ? "/" : "/" + relative.TrimStart('/');
        var encoded = Uri.EscapeDataString(returnPath);
        Nav.NavigateTo($"/Account/grant-role-change?returnUrl={encoded}", forceLoad: true);
    }
}

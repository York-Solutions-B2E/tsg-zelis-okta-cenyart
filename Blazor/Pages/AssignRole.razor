@page "/roles/assign"
@using Shared
@inject Blazor.Services.GraphQLService Gql

<h3>Assign User Role</h3>

@if (!HasRoleChangePermission)
{
    <div class="alert alert-warning">Insufficient access. Contact your admin.</div>
}
else
{
    <div class="mb-3">
        <label>User</label>
        <select class="form-select" @bind="SelectedUserId">
            <option value="">-- select user --</option>
            @foreach (var u in Users) {
                <option value="@u.Id">@u.Email (@u.Role.Name)</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Role</label>
        <select class="form-select" @bind="SelectedRoleId">
            <option value="">-- select role --</option>
            @foreach (var r in Roles) {
                <option value="@r.Id">@r.Name</option>
            }
        </select>
    </div>

    <button class="btn btn-primary" @onclick="SaveAsync">Save</button>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="mt-3 alert alert-info">@Message</div>
    }
}

@code {
    private List<UserDto> Users = new();
    private List<RoleDto> Roles = new();
    private string? SelectedUserId;
    private string? SelectedRoleId;
    private bool HasRoleChangePermission = false;
    private string? Message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HasRoleChangePermission = await Gql.CanViewRoleChangesAsync();
            Roles = await Gql.GetRolesAsync();
            Users = await Gql.GetUsersAsync();
        }
        catch (Exception ex)
        {
            Message = "Failed to load: " + ex.Message;
        }
    }

    private async Task SaveAsync()
    {
        if (!HasRoleChangePermission)
        {
            Message = "Insufficient permission.";
            return;
        }

        if (string.IsNullOrWhiteSpace(SelectedUserId) || string.IsNullOrWhiteSpace(SelectedRoleId))
        {
            Message = "Please select user and role.";
            return;
        }

        Guid userId = Guid.Parse(SelectedUserId);
        Guid roleId = Guid.Parse(SelectedRoleId);

        try
        {
            var res = await Gql.AssignUserRoleAsync(userId, roleId);
            if (res is null)
            {
                Message = "Unexpected response.";
            }
            else if (res.Success)
            {
                Message = res.Message ?? "Role assigned.";
                // reload users
                Users = await Gql.GetUsersAsync();
            }
            else
            {
                Message = res.Message ?? "Failed to assign role.";
            }
        }
        catch (Exception ex)
        {
            Message = "Error: " + ex.Message;
        }
    }
}

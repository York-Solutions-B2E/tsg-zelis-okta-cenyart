@page "/audit"
@using Shared
@inject Blazor.Services.QueryService QueryService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthorizationService AuthorizationService

<h3>Security Audit Dashboard</h3>

@if (isLoading)
{
    <p><em>Loadingâ€¦</em></p>
}
else if (!loaded)
{
    <div class="alert alert-danger">Failed to load audit data. @loadError</div>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <h5>Auth Events</h5>
            <AuthorizeView Policy="CanViewAuthEvents">
                <Authorized>
                    @if (AuthEvents?.Count == 0)
                    {
                        <p><em>No auth events found.</em></p>
                    }
                    else
                    {
                        <table class="table table-sm table-hover">
                            <thead><tr><th>Timestamp</th><th>Author</th><th>Event</th><th>Details</th></tr></thead>
                            <tbody>
                                @foreach (var e in AuthEvents!)
                                {
                                    <tr>
                                        <td>@e.OccurredUtc.ToString("u")</td>
                                        <td>@e.AuthorUserId</td>
                                        <td>@e.EventType</td>
                                        <td>@e.Details</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </Authorized>
                <NotAuthorized>
                    <div class="alert alert-warning">Insufficient access. Contact your admin.</div>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <div class="col-md-6">
            <h5>Role Changes</h5>
            <AuthorizeView Policy="CanViewRoleChanges">
                <Authorized>
                    @if (RoleEvents?.Count == 0)
                    {
                        <p><em>No role change events found.</em></p>
                    }
                    else
                    {
                        <table class="table table-sm table-hover">
                            <thead><tr><th>Timestamp</th><th>Actor -> Target</th><th>Event</th><th>Details</th></tr></thead>
                            <tbody>
                                @foreach (var e in RoleEvents!)
                                {
                                    <tr>
                                        <td>@e.OccurredUtc.ToString("u")</td>
                                        <td>@e.AuthorUserId -> @e.AffectedUserId</td>
                                        <td>@e.EventType</td>
                                        <td>@e.Details</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </Authorized>
                <NotAuthorized>
                    <div class="alert alert-warning">Insufficient access. Contact your admin.</div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    private List<SecurityEventDto>? AllEvents;
    private List<SecurityEventDto>? AuthEvents;
    private List<SecurityEventDto>? RoleEvents;
    private bool isLoading = true;
    private bool loaded = false;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        isLoading = true;
        loaded = false;
        loadError = null;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var canViewAuth = (await AuthorizationService.AuthorizeAsync(user, "CanViewAuthEvents")).Succeeded;
            var canViewRole = (await AuthorizationService.AuthorizeAsync(user, "CanViewRoleChanges")).Succeeded;

            if (!canViewAuth && !canViewRole)
            {
                // Nothing to show; authorized view blocks will show NotAuthorized messages
                AllEvents = new List<SecurityEventDto>();
                AuthEvents = new();
                RoleEvents = new();
                loaded = true;
                return;
            }

            // request events (server will further enforce gating)
            AllEvents = await QueryService.GetSecurityEventsAsync();

            AuthEvents = AllEvents
                .Where(e =>
                    e.EventType.StartsWith("Login", StringComparison.OrdinalIgnoreCase) ||
                    e.EventType.StartsWith("Logout", StringComparison.OrdinalIgnoreCase))
                .ToList();
            RoleEvents = AllEvents.Where(e => string.Equals(e.EventType, "RoleAssigned", StringComparison.OrdinalIgnoreCase)).ToList();

            loaded = true;
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
            loaded = false;
        }
        finally
        {
            isLoading = false;
        }
    }
}
